#!/usr/bin/env php
<?php
require_once __DIR__ . '/constants.php';
require __DIR__ . '/../vendor/autoload.php';

use SplitIO\Common\Di;
use SplitIO\Grammar\Split;
use SplitIO\Grammar\Condition\Partition\TreatmentEnum;
use SplitIO\Log\Logger;
use SplitIO\Log\Handler\Stdout;
use SplitIO\Client;
use SplitIO\Engine;
use SplitIO\Cache\Pool;

bootstrap(is_array($argv) ? $argv : array());

function getOption($option, $key, $val, $argv)
{
    $optionLen = strlen($option);
    $return = null;

    if (0 === strpos($val, $option)) {
        if ($optionLen === strlen($val) && isset($argv[$key+1])) {
            $return = trim($argv[$key+1]);
        } else {
            $return = trim(substr($val, $optionLen+1));
        }
    }

    return $return;
}

function getServiceOptionsMatrix()
{
    /**
     * CONFIG_ARRAY_KEY => ['cli' => '--cli-param', 'ini' => 'section|key']
     */
    return [
        SPLITIO_CONFIG_FILE => ['cli' => '--config-file',
            'ini'       => null,
            'default'   => null,
            'help'      => "the path to your custom ini file"],

        SPLITIO_CONFIG_API_KEY => ['cli' => '--api-key',
            'ini'       => 'split.api-key',
            'default'   => 'localhost',
            'help'      => 'your environment API key'],

        SPLITIO_CONFIG_LOG_ADAPTER => ['cli' => '--log-adapter',
            'ini'       => 'log.adapter',
            'default'   => 'stdout',
            'help'      => 'the log adapter'],

        SPLITIO_CONFIG_LOG_LEVEL => ['cli' => '--log-level',
            'ini'       => 'log.level',
            'default'   => 'info',
            'help'      => 'the log level'],

        SPLITIO_CONFIG_CACHE_TTL => ['cli' => '--cache-ttl',
            'ini' => 'cache.ttl',
            'default' => 300,
            'help' => 'the time to live of cache items'],


        SPLITIO_CONFIG_CACHE_ADAPTER => ['cli' => '--cache-adapter',
            'ini'       => 'cache.adapter',
            'default'   => 'filesystem',
            'help'      => 'the cache adapter provided by Split SDK. Values = [filesystem|memcached|redis]'],

        SPLITIO_CONFIG_CACHE_FILESYSTEM_PATH => ['cli' => '--cache-filesystem-path',
            'ini'       => 'cache.options.path',
            'default'   => '/tmp',
            'help'      => 'the cache directory to save the cache files'],

        SPLITIO_CONFIG_CACHE_REDIS_HOST => ['cli' => '--cache-redis-host',
            'ini'       => 'cache.redis.host',
            'default'   => 'localhost',
            'help'      => 'the cache server host address for Redis adapter'],

        SPLITIO_CONFIG_CACHE_REDIS_PORT => ['cli' => '--cache-redis-port',
            'ini'       => 'cache.redis.port',
            'default'   => 6379,
            'help'      => 'the cache server port number for Redis adapter'],

    ];
}

function bootstrap($options)
{
    $help = in_array('--help', $options);

    if ($help) {
        displayHelp();
        exit(0);
    }

    $cliSyntaxMap = getServiceOptionsMatrix();

    //Parsing the user cli parameters
    $cliOptions = [];
    foreach ($options as $key => $val) {
        foreach ($cliSyntaxMap as $cfgK => $cfgV) {
            if (0 === strpos($val, $cfgV['cli'])) {
                $opt = getOption($cfgV['cli'], $key, $val, $options);
                $cliOptions[$cfgK] = ($opt) ? $opt : null;
            }
        }
    }

    //Parsing the ini file parameters.
    $customConfigFile = (isset($cliOptions[SPLITIO_CONFIG_FILE])) ? $cliOptions[SPLITIO_CONFIG_FILE] : null;
    $iniOptions = readConfig($customConfigFile);
    if (!$iniOptions) {
        outError("The configuration file is missing");
        exit(1);
    }

    //Merging ini and cli parameters. cli has priority.
    $finalOptions = [];
    foreach ($cliSyntaxMap as $k => $v) {
        if (isset($cliOptions[$k])) {
            $finalOptions[$k] = $cliOptions[$k];
        } elseif (isset($iniOptions[$v['ini']])) {
            $finalOptions[$k] = $iniOptions[$v['ini']];
        } else {
            if (isset($iniOptions[$v['default']])) {
                $finalOptions[$k] = $iniOptions[$v['default']];
            }
        }
    }

    //Setting options in Di to use it cross app.
    Di::getInstance()->set(SPLIT_DI_CONFIG_KEY, $finalOptions);

    startSplitService();
}

function readConfig($configFile = null)
{
    if ($configFile === null) {
        $configFile = __DIR__.'/splitio.ini';
    }
    $config = false;
    if (file_exists($configFile)) {
        $config = parse_ini_file($configFile, true);
    }

    return $config;
}

/**
 * displays the help
 */
function displayHelp()
{

    $logo = <<<EOF

      _____       ___ __
     / ___/____  / (_) /_
     \__ \/ __ \/ / / __/
    ___/ / /_/ / / / /_
   /____/ .___/_/_/\__/
       /_/
EOF;
    $slogan = " Rolling out easy!";

    out($logo.$slogan, SPLIT_FG_LIGHT_BLUE);

    $hlp = <<<EOF

Usage:
    splitio [OPTIONS]

Options:
EOF;
    out($hlp);

    $options = getServiceOptionsMatrix();
    foreach ($options as $opt) {
        $init_str = "  ".$opt['cli'].'="'.$opt['default'].'"';
        $str = $init_str;
        for ($i=0; $i < (40 - strlen($init_str)); $i++) {
            $str .= " ";
        }
        $str .= $opt['help'];
        out($str);
    }

    out(PHP_EOL);

}


function addCachePool()
{
    $di = Di::getInstance();
    $config = $di->get(SPLIT_DI_CONFIG_KEY);

    $adapter_config = [];

    switch ($config[SPLITIO_CONFIG_CACHE_ADAPTER]) {
        case 'memcached':
            $adapter_config = [
                'name' => 'memcached',
                'options' => [
                    'servers' => [ //Memcached servers
                        ['172.17.0.2',11211]
                    ]
                ]
            ];
            break;

        case 'redis':
            $adapter_config = [
                'name' => 'redis',
                'options' => [
                    'host' => $config[SPLITIO_CONFIG_CACHE_REDIS_HOST],
                    'port' => $config[SPLITIO_CONFIG_CACHE_REDIS_PORT],
                ]
            ];
            break;

        case 'filesystem':
        default:
            $adapter_config = [
                'name' => 'filesystem',
                'options' => [
                    'path'=> $config[SPLITIO_CONFIG_CACHE_FILESYSTEM_PATH]
                ]
            ];
            break;
    }

    $di->setCache(new Pool([ 'adapter' => $adapter_config ]));

}

function startSplitService()
{
    $di = Di::getInstance();
    $config = $di->get(SPLIT_DI_CONFIG_KEY);

    //Setting the log adapter
    $stdoutAdapter = new Stdout();
    $di->setLogger(new Logger($stdoutAdapter, \Psr\Log\LogLevel::INFO));

    //Adding Cache on Di
    addCachePool();

    //Setting the Split Client to connect Split servers
    if ($di->getSplitClient() === null) {
        $di->setSplitClient(new Client(SPLITIO_URL, $config[SPLITIO_CONFIG_API_KEY]));
    }

    $splitChanges = $di->getSplitClient()->getSplitChanges();
    $splits = $splitChanges['splits'];

    //Creating Split Grammar structures
    $splitList = array();
    foreach ($splits as $split) {
        $splitList[] = new Split($split);
    }

    $cache = $di->getCache();

    //Generating cache data.
    foreach ($splitList as $_split) {

        $users = $_split->getInvolvedUsers();
        $featureName = $_split->getName();
        foreach ($users as $user) {
            $key = \SplitIO\generateCacheKey($user, $featureName);
            $cacheItem = $cache->getItem($key);

            if (Engine::isOn($user, $_split)) {
                $cacheItem->set(TreatmentEnum::ON);
                $cacheItem->expiresAfter(300);
                $cache->save($cacheItem);
            }
        }
    }
}

function out($str, $fg=null, $bg=null)
{
    $outString = "";

    if ($fg !== null) {
        $outString .= "\033[" . $fg . "m";
    }

    if ($bg !== null) {
        $outString .= "\033[" . $bg . "m";
    }

    // Add string and end coloring
    $outString .=  $str . "\033[0m";

    echo $outString.PHP_EOL;
}

function outError($str)
{
    out($str, SPLIT_FG_WHITE, SPLIT_BG_RED);
}

function outInfo($str)
{
    out($str, SPLIT_FG_BROWN);
}

function outSuccess($str)
{
    out($str, SPLIT_FG_GREEN);
}
